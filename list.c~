#include <stdio.h>
#include <stdlib.h>
#include "list.h"
#include <string.h>

/* your list function definitions */
/*
Plan: 
	1) pass pointer to a function to parse input, expect a pointer to a line in return
	2) pass the pointer to the line which will check the data and pass it onto the list
			in a sorted manner, expect a pointer to the head of the list in return
	3) call the function to print the list (pass in pointer)
	4) call the function to print user stats (IDK what to pass in)
	char *input = get_input (input_file); 
	struct node *head = append_line(input);
	print_list(head);
	print_stats();	
*/
	

/*void append(int num, struct node** head){
	struct node* new = (struct node*)malloc(sizeof(struct node)); //make a new node
	new->i=num; //set it to equal the number
	new->next= NULL;
	if ((*head) == NULL){ //no nodes
		printf("if entered\n");
		*head= new;
		return;}
	
	while ((*head)->next != NULL){
		printf("while entered\n");
		(*head) = (*head)->next;}

	(*head)->next = new;
	return;
}*/
void list_sort(struct node **head) {//sort a list using a bubble sort to make it easier to sort in place
    // steps: Pull off first and second element
	//compare, swap if required
	//move to next elememnt 
	//Compound while loop, only stop iterating when head->name==last sorted itemm
	struct node **temp=head;	 //make a new head that can be safely modified
	struct node *first = (*temp);  	//pop the first item from the list
	struct node *second = NULL; 	//initalize a second and sorted_item node
	struct node *sorted_item = NULL;
	int integer;
	while ((first->next) != sorted_item){
		second = (first->next); //first item is already popped. pull the second item for comparision.
		while((second->next) != sorted_item){
			if ((first->i) < (second->i)){
			}if((first->i) > (second->i)){ 	//if they need to be swapped,
				integer = first->i;
				first->i=second->i;
				second->i = integer;
			}first=second; 					//second becomes the new first
			second=second->next;				 //second moves on
		}
	sorted_item=second;		//after the "second" has bubbled to the end, set it as the last sorted item
	first = (*temp); 		//pull the first item from the list for another iteration
	}				//when this while loop exits, the list should be sorted

}
void swap(int first, int second){
	//pass in pointers to characters, switch the characters from one to the other
	int temp = first; //save first off somewhere where it is safe
	first = second; 
	second = temp; 
}	
	

void append(int num, struct node **head) {
	struct node *new_node = (struct node*)malloc(sizeof(struct node)); //make some memory for a new node
	new_node->i = num;
	new_node->next = *head; //set new_node->next as the head
	*head=new_node; //set the new node as the head
		

}
void list_print(const struct node *list) {
    int i = 0;
    while (list != NULL) {
        printf("List item %d: %d\n", i++, list->i);
        list = list->next;
    }
}
struct node** parse_numbers(char *s, struct node **head) {
	//value 46= .; 35=#; 32=space; ints between 48 and 57
	int i;
	char * tok = strtok(s, " "); //tokenize the line
	while (tok != NULL){
		if(strstr(tok, "#")){//if its a comment
			break;//exit the loop, the end of the line was reached

		}if(strstr(tok, ".")!=NULL){ //if its a decimal
		
		}else{ //else, convert to an int and push it onto the linked list
			i=atoi(tok);
			if (i!=0){
			append(i, head);}
		}tok=strtok(NULL, "  \n");
	}return head;
		
}
void get_input(FILE * input){
/* 
	-Parse the file, pulling off lines and checking them for correct form
	-Append them to the linked list by calling the append function 
*/
	struct node **head=(struct node**)malloc(sizeof(struct node));
	char line[1000]={};
	while(fgets(line, 100, input)){ //keep pulling off lines till we are done
		if(feof ( input )){
			break;}
		head = parse_numbers(line, head); //send line to be added to list
	}
	list_sort(head); 
	printf("*** List Contents Begin ***\n");
	list_print(*head);
	return;



}

void print_list(struct node **head){

}

void print_stats(){}




